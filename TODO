2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
4. Add StackOverflow-site search support
7. Add support to avoid StackExchange throttle
8. Add support of different page size, different number of workers
9. Add ss auto-switch
12. Add captcha detection & user agent randomization
    A captcha url example: https://www.google.com/sorry/index?continue=https://www.google.com/search%3Fq%3Dsite:stackoverflow.com%2Bandroid%26start%3D0%26num%3D30&q=EgSweqvQGKG4_9wFIhkA8aeDSw4hCN5zGGiuZrrfLsaNol54nxZjMgFy
13. Google cannot be accessed in Windows10
    As title described, SEH cannot access Google in Windows10.
    A `SocketTimeoutException: Read timed out' was thrown. This
    maybe caused by the DNS resolution of Java. Via profiling
    logs of ss, we saw that ss accessed a host name when using
    browsers, while accessed an IP address when using Java.
=====
2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
4. Add StackOverflow-site search support
5. Add repackage in maven
7. Add support to avoid StackExchange throttle
8. Add support of different page size, different number of workers
9. Add ss auto-switch
12. Add captcha detection & user agent randomization
    A captcha url example: https://www.google.com/sorry/index?continue=https://www.google.com/search%3Fq%3Dsite:stackoverflow.com%2Bandroid%26start%3D0%26num%3D30&q=EgSweqvQGKG4_9wFIhkA8aeDSw4hCN5zGGiuZrrfLsaNol54nxZjMgFy
13. Google cannot be accessed in Windows10
    As title described, SEH cannot access Google in Windows10.
    A `SocketTimeoutException: Read timed out' was thrown. This
    maybe caused by the DNS resolution of Java. Via profiling
    logs of ss, we saw that ss accessed a host name when using
    browsers, while accessed an IP address when using Java.
=====
2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
4. Add StackOverflow-site search support
5. Add repackage in maven
7. Add support to avoid StackExchange throttle
8. Add support of different page size, different number of workers
9. Add ss auto-switch
11. Extract AppendableItem for Appender
    1) Abstract multiple append() methods into
        append(List<? extends AppendableItem>
       and override it in CsvAppender using
        append(List<? extends CsvItemable>
    2) Add a append(CsvAppendable) to CsvAppender to lower
       space cost
    2) Make SearchItem implements CsvItemable
    3) Abstract Fetcher from SoupFetcher and Fetcher, and
       move AppenderFactory.initialize() to it
12. Add captcha detection & user agent randomization
    A captcha url example: https://www.google.com/sorry/index?continue=https://www.google.com/search%3Fq%3Dsite:stackoverflow.com%2Bandroid%26start%3D0%26num%3D30&q=EgSweqvQGKG4_9wFIhkA8aeDSw4hCN5zGGiuZrrfLsaNol54nxZjMgFy
14. Modify Fetcher name, along with its configurations name, add prefix
=====
2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
4. Add StackOverflow-site search support
5. Add repackage in maven
7. Add support to avoid StackExchange throttle
8. Add support of different page size, different number of workers
9. Add ss auto-switch
11. Extract AppendableItem for Appender
    1) Abstract multiple append() methods into
        append(List<? extends AppendableItem>
       and override it in CsvAppender using
        append(List<? extends CsvItemable>
    2) Add a append(CsvAppendable) to CsvAppender to lower
       space cost
    2) Make SearchItem implements CsvItemable
    3) Abstract Fetcher from SoupFetcher and Fetcher, and
       move AppenderFactory.initialize() to it
12. Add captcha detection & user agent randomization
    A captcha url example: https://www.google.com/sorry/index?continue=https://www.google.com/search%3Fq%3Dsite:stackoverflow.com%2Bandroid%26start%3D0%26num%3D30&q=EgSweqvQGKG4_9wFIhkA8aeDSw4hCN5zGGiuZrrfLsaNol54nxZjMgFy
13. Add goo command
14. Modify Fetcher name, along with its configurations name, add prefix
=====
2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
4. Add StackOverflow-site search support
5. Add repackage in maven
7. Add support to avoid StackExchange throttle
8. Add support of different page size, different number of workers
9. Add ss auto-switch
10. Parallelize GooFetcher, and add restart mechanism, synonyms, logging
11. Extract AppendableItem for Appender
    1) Abstract multiple append() methods into
        append(List<? extends AppendableItem>
       and override it in CsvAppender using
        append(List<? extends CsvItemable>
    2) Add a append(CsvAppendable) to CsvAppender to lower
       space cost
    2) Make SearchItem implements CsvItemable
    3) Abstract Fetcher from SoupFetcher and Fetcher, and
       move AppenderFactory.initialize() to it
12. Add captcha detection & user agent randomization
    A captcha url example: https://www.google.com/sorry/index?continue=https://www.google.com/search%3Fq%3Dsite:stackoverflow.com%2Bandroid%26start%3D0%26num%3D30&q=EgSweqvQGKG4_9wFIhkA8aeDSw4hCN5zGGiuZrrfLsaNol54nxZjMgFy
13. Add goo command
=====
2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
4. Add google- and StackOverflow-site search support
    Integrate socli
5. Add repackage
7. Add support to avoid StackExchange throttle
8. Add support of different page size, different number of workers
9. Add ss auto-switch
=====
0. Synonyms
    Find synonyms of the tags, and add them to the search
    condition tagged.
2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
4. Add google- and StackOverflow-site search support
    Integrate socli
5. Add repackage
7. Add support to avoid StackExchange throttle
8. Add support of different page size, different number of workers
9. Add ss auto-switch
======
0. Synonyms
    Find synonyms of the tags, and add them to the search
    condition tagged.
2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
4. Add google search support
5. Add repackage
7. Add support to avoid StackExchange throttle
8. Add support of different page size, different number of workers
=====
0. Synonyms
    Find synonyms of the tags, and add them to the search
    condition tagged.
2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
3. Add socks proxy
4. Add google search support
5. Add repackage
7. Add support to avoid StackExchange throttle
8. Add support of different page size, different number of workers
=====
0. Synonyms
    Find synonyms of `android', and add them to the search
    condition tagged.
2. Postprocess the files
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
3. Rename to SEH (StackExchange-Helper)
=====
0. Synonyms
    Find synonyms of `android', and add them to the search
    condition tagged.
2. Postprocess the files
    1) Merging
        When all works are completed (not died), merge all
        csv files into one (it is okay whether to sort it via
        score or not)
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
======
0. Synonyms
    Find synonyms of `android', and add them to the search
    condition tagged.
1. Write results to csv files
    Searched Items
        Each worker with a csv file named Worker_{ID}.csv to
        store the searched items, including their id, title,
        tag, score, link, from_date, to_date, nr_answer,
        accept_rate, ...
2. Postprocess the files
    1) Merging
        When all works are completed (not died), merge all
        csv files into one (it is okay whether to sort it via
        score or not)
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes
=====
0. Synonyms
    Find synonyms of `android', and add them to the search
    condition tagged.
1. Write results to csv files
    1) Searched Items
        Each worker with a csv file named Worker_{ID}.csv to 
        store the searched items, including their id, title,
        tag, score, link, from_date, to_date, nr_answer, 
        accept_rate, ...
    2) Configuration
        Due to the throttle configured by StackExchange, we
        cannot fetch all information once, i.e., we have to
        fetch them several times.
        To avoid redundancies, all workers should share one
        configuration file named configurations.properties,
        to record their stop conditions (i.e., the concerned
        restart conditions), including the page/item they
        stopped fetching at...
2. Postprocess the files
    1) Merging
        When all works are completed (not died), merge all
        csv files into one (it is okay whether to sort it via
        score or not)
    2) Analysing
        Filter questions related to webview performance, and
        read them, take notes